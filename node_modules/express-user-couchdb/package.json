{
  "name": "express-user-couchdb",
  "version": "0.3.4",
  "description": "An express app module connected to couchdb _users table",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/twilson63/express-couchUser.git"
  },
  "keywords": [
    "couchdb",
    "express",
    "module",
    "_users",
    "authentication"
  ],
  "author": {
    "name": "Tom"
  },
  "license": "MIT",
  "dependencies": {
    "express": "~3.2.6",
    "nano": "~5.10.0",
    "uuid": "~1.4.1",
    "nodemailer": "~0.4.4",
    "email-templates": "~0.1.0",
    "underscore": "~1.5.1",
    "only": "0.0.2"
  },
  "readmeFilename": "readme.md",
  "dist": {
    "shasum": "c21ddc09ac252d74e8b0e820d6aa74a89848ac2c"
  },
  "_resolved": "https://registry.npmjs.org/express-user-couchdb/-/express-user-couchdb-0.3.4.tgz",
  "_from": "express-user-couchdb@0.3.4",
  "gitHead": "a79356c886a52270c10aaffed86c3b35cdb5f6c2",
  "directories": {
    "test": "test"
  },
  "devDependencies": {
    "expect.js": "~0.2.0",
    "grunt": "~0.4.1",
    "grunt-bump": "0.0.11",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-watch": "~0.4.4",
    "grunt-mocha-test": "^0.10.2",
    "mocha": "~1.12.0",
    "nock": "^0.28.3",
    "request": "~2.22.0",
    "supertest": "^0.11.0",
    "grunt-mocha-istanbul": "~1.4.1"
  },
  "readme": "# express-user-couchdb - ExpressCouchDb Module\n\n[![Build Status](https://secure.travis-ci.org/twilson63/express-couchUser.png)](http://travis-ci.org/twilson63/express-couchUser)\n\nThis module is a authentication lib built on top of couch's user model.\n\n## requirements\n\n* couchdb\n* nodejs\n\n## init example\n\n``` js\nvar couchUser = require('express-couchUser');\nvar express = require('express');\nvar app = express();\n\n// Required for session storage\napp.use(express.cookieParser());\napp.use(express.session({ secret: 'Use something else here.'}));\n\napp.configure(function() {\n  app.use(couchUser({\n    users: 'http://localhost:5984/_users',\n    email: {\n      ...\n    },\n    adminRoles: [ 'admin' ],\n    validateUser: function(data, cb) {...}\n  }));\n});\n\n```\nThe optional adminRoles attribute allows you to specify one or more administrative roles that are allowed to add, update, and delete users.\n\nThe optional validateUser allows you to specify extra validation other than username/password. For example, checking for greater than x number of login attempts. The first argument data is an object that has request, user, and headers fields. The reason the callback pattern is used to pass out the result is that you can do async calls within this function (like check another database, etc).\n\nExample validateUser function.\n\n``` js\nvalidateUser: function(data, cb) {\n  var MAX_FAILED_LOGIN = 5;\n  var req = data.req;     //all the fields in data is captured from /api/user/signin callback function\n  var user = data.user;\n  var headers = data.headers;\n  var outData = {         // This object will be attached to the session \n    userInfo: \"userAge\"   // req.session.userInfo will be \"userAge\"\n  };\n\n  if(data.user.failedLogin > MAX_FAILED_LOGIN) {\n    //fails check\n    var errorPayload = {\n      statusCode: 403,                           //if not included will default to 401 \n      message: 'Exceeded fail login attempts',   //if not included will default to 'Invalid User Login'\n      error: 'Forbidden'                         //if not included will default 'unauthorized'\n    }\n    cb(errorPayload);\n  } else {\n    //passess check\n    cb(null, outData);\n  }\n}\n```\n\n## Initialize CouchDb\n\nBefore you can use this module, you need to run a setup process to add the required views to the couchDb Users table, there is an `init.js` file that does this for you.  You can include it in your Gruntfile as a task.\n\n``` js\ngrunt.registerTask('setup', 'setup database', function() {\n  var userSetup = require('./node_modules/express-user-couchdb/init');\n  userSetup('http://localhost:5984/_users', function(err) {\n    console.log(\"configured express-user-couchdb module\");\n  });\n});\n```\n\nor you can invoke via command line\n\n``` sh\nnode ./node_modules/express-user-couchdb/init http://localhost:5984/_users\n```\n\n## API Commands\n\n### POST /api/user/signup\n\nCreate a new user account.  If config.verify is set, the user will be sent an email with a link to verify their account.\nIf the user trying to login has enabled set to false, they will be notified to contact an admin to reactivate their account.\n\n``` json\n{\n  \"name\": \"user\",\n  \"password\": \"password\",\n  \"email\": \"user@email.com\",\n  \"data\": {}\n}\n```\n\n### POST /api/user/signin\n\nAllow a user to log in.  If config.verify is set, then the user is required to validate their email address before logging in.\n\n``` json\n{\n  \"name\": \"user\",\n  \"password\": \"password\"\n}\n```\n\n### POST /api/user/signout\n\n``` json\n{\n  \"name\": \"user\"\n}\n```\n\n### GET /api/user/current\n\nThe currently logged in user.  Returns a 401 error if the user is not currently logged in.\n\n\n### POST /api/user/forgot\n\nIf the user trying to retrieve their password has enabled set to false, they will be notified to contact an admin to reactivate their account.\n\n``` json\n{\n  \"email\": \"user@email.com\"\n}\n```\n\n### POST /api/user/verify:email\n\nSend an email to a user that includes a verification code and link to verify their account.\n\n``` json\n{\n  \"name\": \"email\"\n}\n```\n\n### POST /api/user/verify/:code\n\nConfirm that a user's email address is valid using a previously generated verification code.\n\n### POST /api/user/reset\n\nReset a user's password (requires the code generated using /api/user/forgot).\n\n``` json\n{\n  \"name\": \"user\",\n  \"code\": \"code\"\n}\n```\n\n### GET /api/user?roles=foo,bar\n\nReturn a list of users matching the specified roles.\n\n[{ user... }, { user2... }]\n\n### POST /api/user\n\nCreate a new user.  If config.adminRoles is set, the user making this call must have one of the specified roles.\n\n``` json\n{\n  \"name\": \"user1\",\n  \"type\": \"user\",\n  \"password\": \"foo\",\n  \"roles\": ['admin']\n}\n```\n\n### GET /api/user/:name\n\nReturns the user whose name matches :name.\n\n``` json\n{\n  \"_id\": \"org.couchdb.user:user1\",\n  \"_rev\": \"1-123456\",\n  \"name\": \"user1\",\n  \"type\": \"user\",\n  \"password\": \"foo\",\n  \"roles\": ['admin']\n}\n```\n\n### PUT /api/user/:name\n\nUpdates the user specified by :name.  If config.adminRoles is set, then a user must have an admin role to be able to update anyone else's record.  Non-admins cannot update their own role information.\n\n``` json\n{\n  \"_id\": \"org.couchdb.user:user1\",\n  \"_rev\": \"1-123456\",\n  \"name\": \"user1\",\n  \"type\": \"user\",\n  \"password\": \"foo\",\n  \"roles\": ['admin']\n}\n```\n\n### DELETE /api/user/:name\n\nRemoves the specified user.  If config.adminRoles is set, then a user must have an admin role to be able to delete a user.\n\n``` json\n{\n  \"_id\": \"org.couchdb.user:user1\",\n  \"_rev\": \"1-123456\",\n  \"name\": \"user1\",\n  \"type\": \"user\",\n  \"password\": \"foo\",\n  \"roles\": ['admin']\n}\n```\n\n## Usage\n\n``` js\nvar user = require('express-user-couchdb');\nvar config = { \n  users: 'http://localhost:5984/_users', \n  email ....\n};\napp.config(function() {\n  // handle other requests first\n  app.use(express.router);\n  // handle core requests\n  app.use(user(config));\n});\n```\n\n``` json\nnode init.js [couchdb users db]\n```\n\n## setting up email templates\n\nexpress-user-couchdb has the capability to attach to an smtp server and send emails for certain user events.  And you have the ability to manipulate the e-mail templates.  \n\nexpress-user-couchdb uses the nodemailer and email-templates modules to perform the email process, but you need to pass in the config settings in the config argument of the module:\n\nHere is an example of the config settings:\n\n``` js\n{\n  couch: 'http://localhost:5984/_users',\n  email: {\n    service: 'SMTP',\n    SMTP: {\n      ....\n    },\n    templateDir: ....\n  }\n}\n```\n\nto setup the forgot password email template you need to create a folder called `forgot` in the email template directory, then in that folder you need to create a style.css, html.ejs, and text.ejs.  These files will be used to build your email template.  Here is an example of the text.ejs\n\n### Forgot Password\n\n``` html\nFoo App\n#######\n\nWe are sorry you forgot your password, in order to reset your password,  we need you to click the link below.\n\nCopy Link:\n\nhttp://fooapp.com/account/reset?code=<%= user.code %>\n\nand paste into your browsers url.\n\nThank you for supporting our application, please let us know if you have any questions or concerns.\n\nThanks\n\nThe Team\n```\n\n### confirm e-mail\n\nIf you plan to enable the users to register, you may want to send a confirmation email to them when they sign up.\n\nYou would follow the same steps above, but instead of creating a forgot folder, you would need to create a confirm folder and place your css, html.ejs, and text.ejs files.\n\n## Contribution\n\nPull requests are welcome.\n\n## License\n\nMIT\n\n## Support\n\nPlease add issues to the github repo.\n\n## Thanks\n\n* CouchDb Team\n* NodeJS Team\n* NodeMailier\n* Nano Team\n* Email-Templates\n\n\n",
  "bugs": {
    "url": "https://github.com/twilson63/express-couchUser/issues"
  },
  "homepage": "https://github.com/twilson63/express-couchUser",
  "_id": "express-user-couchdb@0.3.4",
  "_shasum": "972c6085e348eede4c8d884a0fb94b627f834a3e"
}
